plugins {
    id 'dev.architectury.loom' version '1.7.419' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.gradleup.shadow' version '8.3.6' apply false
    id 'io.github.pacifistmc.forgix' version '1.2.9' apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings "net.fabricmc:yarn:$rootProject.yarn_mappings:v2"
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}

// Forgix configuration for merging Fabric, Forge, and Quilt JARs into a single file
apply plugin: 'io.github.pacifistmc.forgix'

forgix {
    group = 'com.theplumteam'
    mergedJarName = 'blockpops-merged.jar'
    outputDir = 'build/libs'

    // Let Forgix auto-detect the JARs from subprojects
    fabric()
    forge()
    quilt()
}

// Custom task for one-click build and merge (incremental - fast)
task buildAndMerge {
    group = 'build'
    description = 'Builds all loaders and merges them into a single JAR (incremental build)'

    // Build all subprojects
    dependsOn subprojects.collect { it.tasks.findByPath('build') }.findAll { it != null }
    dependsOn 'mergeJars'

    // Ensure all builds run before mergeJars
    tasks.findByName('mergeJars').mustRunAfter(subprojects.collect { it.tasks.findByPath('build') })
}

// Custom task for clean build and merge (full rebuild - slower but safer)
task cleanBuildAndMerge {
    group = 'build'
    description = 'Clean builds all loaders and merges them into a single JAR (full rebuild)'

    // Clean first, then build, then merge
    dependsOn subprojects.collect { it.tasks.findByPath('clean') }.findAll { it != null }
    dependsOn 'buildAndMerge'

    // Ensure clean runs before build
    tasks.findByName('buildAndMerge').mustRunAfter(subprojects.collect { it.tasks.findByPath('clean') })
}
